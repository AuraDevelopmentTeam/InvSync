import io.franzbecker.gradle.lombok.task.DelombokTask
import java.util.regex.*
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "org.spongepowered.plugin" version "0.8.1"
    id "com.github.johnrengelman.shadow" version "1.2.4"
    id "io.franzbecker.gradle-lombok" version "1.8"
}

apply plugin: "java"
apply plugin: "eclipse"
apply plugin: "maven"
apply plugin: "maven-publish"

def getChangelog() {
    Pattern pattern = Pattern.compile("^.+?\n-+\n\n((?:- .+?\n)+)");
    Matcher match = pattern.matcher(file("CHANGELOG.md").text.replaceAll("\r", ""));
    
    if (match.find()) {
        String res = match.group(1);
    
        return res.substring(0, res.length() - 1);
    } else {
        return "";
    }
}
def getVersionType() {
    def lower_version = version.toLowerCase();
    
    if (lower_version.contains("beta") || lower_version.contains("rc"))
        return "beta";
    else if (lower_version.contains("alpha"))
        return "alpha";
    else
        return "release";
}
def getVersionName() {
    try {
        def version;
        def tmp = "git describe --tags --dirty=-SNAPSHOT".execute().text.trim().substring(1).split("-");
        
        if (tmp.length <= 2) {
            version = tmp.join("-");
        } else {
            def versions = tmp[0].split("\\.");
            versions[2] = String.valueOf(versions[2].toInteger() + tmp[1].toInteger());
            
            version = versions.join(".");
            
            if (tmp.length == 4)
                version += "-" + tmp[3];
        }
        
        if (plugin_version_postfix.isEmpty())
            return version;
        else
            return version.replaceFirst("^(\\d+\\.\\d+\\.\\d+)", "\$1-${plugin_version_postfix}");
    } catch(Exception e) {
        println e
        return "UNKNOWN-VERSION"
    }
}
def signJar(archivePath) {
    if (project.hasProperty("keyStoreAlias") && project.hasProperty("keyStore") && project.hasProperty("keyStorePass")) {
        ant.signjar(
            jar:                  archivePath,
            alias:                project.keyStoreAlias,
            keystore:             project.keyStore,
            storepass:            project.keyStorePass,
            preservelastmodified: true
        )
    } else {
        println "WARNING!!!\tCannot sign jar!"
    }
}

def MainDirResources = fileTree(dir: file("."), includes: ["README.md", "LICENSE", "CHANGELOG.md"])
group = "world.jnc.invsync"
version = getVersionName()

repositories {
    jcenter()
    mavenCentral()
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/maven"
    }
}

dependencies {
    compile "org.spongepowered:spongeapi:${sponge_version}"
    compile "mysql:mysql-connector-java:${msql_jdbc_version}"
}

lombok {
    version = "1.16.16"
    sha256 = "fbf682c7ff113e5187a9c4b4cbd7a8ad782abd8ccff91b9fa7289a4a6aa8c19a"
}

task delombok(type: DelombokTask) {
    args("src/main/java", "-d", "build/sources/delomboked/java")
}

task showVersion {
    description "Displays the current version"
    group "help"
    
    generateMetadata.dependsOn showVersion
  
    doLast {
        println version
        
        def versionFile = new File(buildDir, '.version');
    
        versionFile.getParentFile().mkdirs();
        versionFile.text = version;
    }
    
    outputs.upToDateWhen { false }
}

task gitTag {
    description "Tags the current version in git. Specify the version by passing \"-PtagVersion=version\""
    group "help"
    
    doLast {
        def tagVersion
    
        if ( project.hasProperty("tagVersion") ) {
            tagVersion = project.tagVersion
        } else {
            tagVersion = "v" + version.split("-")[0]
        }
        
        ("git tag -a ${tagVersion} -m '" + getChangelog() + "'").execute();
    }
}


processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "sponge_version", project.sponge_version

    from MainDirResources
}

task processSources (type: Sync) {
    inputs.property "version", project.version
    inputs.property "sponge_version", project.sponge_version
    
    from "src/main/java"
    into "$buildDir/generated-src"
    filter (ReplaceTokens, tokens: [
        "version": version
    ])
    
    compileJava.source = processSources.outputs.files
    compileJava.dependsOn processSources
}

jar {
    classifier = "dev"
    
    doLast {
        signJar(jar.archivePath)
    }
}

shadowJar {
    classifier = null

    dependencies {
        include dependency("mysql:mysql-connector-java")
    }
    
    relocate ("com.mysql", "${project.group}.shadow.mysql") {
        // Bug in relocate!
        exclude "com.mysql.cj.jdbc.Driver"
    }
   
    doLast {
        signJar(shadowJar.archivePath)
    }
}

task sourceJar (type: Jar, dependsOn: processSources) {
    classifier = "sources"
    from processSources.outputs
    from MainDirResources

    doLast {
        signJar(sourceJar.archivePath)
    }
}

artifacts {
    archives jar
    archives shadowJar
    archives sourceJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty("local_maven")) {
                repository(url: "file://${local_maven}")
                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging "jar"
                        description "This plugin synchronizes the player inventory with a database"
                        url "https://github.com/BrainStone/InvSync"
                        scm {
                            url "https://github.com/BrainStone/InvSync"
                            connection "scm:git:git@github.com:BrainStone/InvSync.git"
                            developerConnection "scm:git:git@github.com:BrainStone/InvSync.git"
                        }
                        issueManagement {
                            system "github"
                            url "https://github.com/BrainStone/InvSync/issues"
                        }
                        licenses {
                            license {
                                name "License"
                                url "https://raw.githubusercontent.com/BrainStone/InvSync/master/LICENSE"
                                distribution "repo"
                            }
                        }
                        developers {
                            developer {
                                id "brainstone"
                                name "The_BrainStone"
                                roles {
                                    role "owner"
                                    role "developer"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
