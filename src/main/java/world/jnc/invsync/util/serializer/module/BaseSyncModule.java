package world.jnc.invsync.util.serializer.module;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import lombok.Getter;
import org.slf4j.Logger;
import org.spongepowered.api.data.DataContainer;
import org.spongepowered.api.data.DataQuery;
import org.spongepowered.api.data.DataView;
import org.spongepowered.api.entity.living.player.Player;
import world.jnc.invsync.InventorySync;
import world.jnc.invsync.permission.PermissionRegistry;

@SuppressFBWarnings(
  value = {"JLM_JSR166_UTILCONCURRENT_MONITORENTER", "RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"},
  justification = "Code is generated by Lombok and I have no influence over it"
)
public abstract class BaseSyncModule {
  public static final DataQuery THIS = DataQuery.of("data");

  private static final Pattern capitalizerPattern = Pattern.compile("(?:^|\\.|_)(\\w)");

  @Getter(lazy = true)
  private final DataQuery query = DataQuery.of(getName());

  protected static String getPermissionPrefix() {
    return PermissionRegistry.SYNC;
  }

  protected static boolean getDebug() {
    return InventorySync.getConfig().getGeneral().getDebug();
  }

  protected static Logger getLogger() {
    return InventorySync.getLogger();
  }

  public abstract String getName();

  public String getPermission() {
    return getPermissionPrefix() + getName();
  }

  public String getNiceName() {
    final String moduleName = getName();
    final StringBuffer buffer = new StringBuffer(moduleName.length());
    final Matcher match = capitalizerPattern.matcher(moduleName);

    while (match.find()) {
      match.appendReplacement(buffer, match.group(1).toUpperCase());
    }

    match.appendTail(buffer);

    return buffer.toString();
  }

  public String getSettingName() {
    return "enable" + getNiceName();
  }

  public boolean isEnabled() {
    return InventorySync.getConfig().getSynchronize(getSettingName());
  }

  public boolean getSyncPlayer(Player player) {
    return isEnabled() && player.hasPermission(getPermission());
  }

  public final DataView serialize(Player player) {
    return serialize(player, Optional.empty());
  }

  public final DataView serialize(Player player, Optional<DataView> container) {
    return serialize(player, container.orElseGet(DataContainer::createNew));
  }

  public abstract DataView serialize(Player player, DataView container);

  public final void deserialize(Player player, Optional<DataView> container) {
    if (container.isPresent()) deserialize(player, container.get());
  }

  public abstract void deserialize(Player player, DataView container);
}
